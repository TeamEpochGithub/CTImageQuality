program: tune.py
method: bayes
metric:
  name: best_score
  goal: maximize
parameters:
  pretrain:
    values: ['None', 'denoise']  # discrete_classification
  img_size:
    values: [256, 512]
  model:
    values: ['ED_CNN', 'EDCNN3', 'DNCNN'] # ['Efficientnet_Swin', 'Efficientnet_Swinv2', 'Resnet34_Swin', 'Resnet34_Swinv2', 'Efficientnet_B0', 'Efficientnet_B4', 'Efficientnet_B7', 'Resnet18', 'Resnet50', 'Resnet152', 'Efficientnet_B1', 'Efficientnet_B2', 'Efficientnet_B3', 'Efficientnet_B5', 'Efficientnet_B6', 'Resnet34', 'Resnet101']
  epochs:
    values: [150]
  batch_size:
    values: [16]
  weight_decay:
    values: [1e-3, 3e-4, 1e-4]
  lr:
    values: [1e-3, 3e-4, 1e-4]
  min_lr:
    values: [1e-5, 1e-6]
  ShufflePatches:
    values: [True, False]
  RandomHorizontalFlip:
    values: [True, False]
  RandomVerticalFlip:
    values: [True, False]
  RandomRotation:
    values: [True, False]
  ZoomIn:
    values: [False]
  ZoomOut:
    values: [False]
  XShift:
    values: [True, False]
  YShift:
    values: [True, False]
  RandomShear:
    values: [False]
  rotation_angle:
    values: [3, 10, 25]
  max_shift:
    values: [0.05, 0.15]
  dataset:
    values: ['original', 'vornoi']
  subtract_filter:
    values: [True, False]
  normalize:
    values: [True, False]
  loss_function:
    values: ['mixed', 'statistical', 'mse']
